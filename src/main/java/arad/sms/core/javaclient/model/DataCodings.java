/*
 * Arad SMS Core Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package arad.sms.core.javaclient.model;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets DataCodings
 */
@JsonAdapter(DataCodings.Adapter.class)
public enum DataCodings {

  /// <summary>
  /// SMSC Default Alphabet (GSM 7 bit) (0x0)
  /// </summary>
  Default( 0x0),

  /// <summary>
  /// IA5 (CCITT T.50)/ASCII (ANSI X3.4) (0x1)
  /// </summary>
  ASCII( 0x1),
  /// <summary>
  /// Octet unspecified (8-bit binary) (0x2)
  /// </summary>
  Octets (0x2),
  /// <summary>
  /// Latin 1 (ISO-8859-1) (0x3)
  /// </summary>
  Latin1(0x3),
  /// <summary>
  /// Octet unspecified (8-bit binary) (0x4)
  /// </summary>
  OctetUnspecified(0x4),
  /// <summary>
  /// Cyrllic (ISO-8859-5)(0x6)
  /// </summary>
  Cyrllic(0x6),
  /// <summary>
  /// Latin/Hebrew (ISO-8859-8) (0x7)
  /// </summary>
  LatinHebrew(0x7),
  /// <summary>
  /// UCS2 (ISO/IEC-10646) (0x8)
  /// </summary>
  UCS2(0x8),

  /// <summary>
  /// Flash message (Class 0) (0x10)
  /// </summary>
  Class0FlashMessage( 0x10),

  /// <summary>
  /// ME-specific message (Class 1) (0x11)
  /// </summary>
  Class1MEMessage(0x11),

  /// <summary>
  /// IM/USIM-specific message (Class 2) (0x12)
  /// </summary>
  Class2SIMMessage(0x12),

  /// <summary>
  /// TE-specific message (Class 3) (0x13)
  /// </summary>
  Class3TEMessage(0x13),

  /// <summary>
  /// Coding Group: Message Marked for Automatic Deletion
  /// </summary>
  GroupAutomaticDeletion(0x40),

  /// <summary>
  /// Coding Group: Data Coding/Message Class
  /// </summary>
  GroupMessageClass(0xF0),



  /// <summary>
  /// Flash message (Class 0) with 8 bit data (0x14)
  /// </summary>
  Class0FlashMessage8bit( Class0FlashMessage.getValue()  | OctetUnspecified.getValue() ),

  /// <summary>
  /// ME-specific message (Class 1) with 8 bit data (0x15)
  /// </summary>
  Class1MEMessage8bit(Class1MEMessage.getValue()  | OctetUnspecified.getValue() ),

  /// <summary>
  /// IM/USIM-specific message (Class 2) with 8 bit data (0x16)
  /// </summary>
  Class2SIMMessage8bit (Class2SIMMessage.getValue()  | OctetUnspecified.getValue() ),

  /// <summary>
  /// TE-specific message (Class 3) with 8 bit data (0x17)
  /// </summary>
  Class3TEMessage8bit(Class3TEMessage.getValue()  | OctetUnspecified.getValue() ),

  /// <summary>
  /// Flash message (Class 0) with UCS2 characters (0x18)
  /// </summary>
  Class0FlashMessageUCS2(Class0FlashMessage.getValue()  | UCS2.getValue()),

  /// <summary>
  /// ME-specific message (Class 1) with UCS2 characters  (0x19)
  /// </summary>
  Class1MEMessageUCS2(Class1MEMessage.getValue() | UCS2.getValue()),

  /// <summary>
  /// IM/USIM-specific message (Class 2) with UCS2 characters (0x1A)
  /// </summary>
  Class2SIMMessageUCS2(Class2SIMMessage.getValue() | UCS2.getValue()),

  /// <summary>
  /// TE-specific message (Class 3) with UCS2 characters  (0x1B)
  /// </summary>
  Class3TEMessageUCS2 (Class3TEMessage.getValue() | UCS2.getValue()),

  /// <summary>
  /// Message Class 0 (0xF0)
  /// </summary>
  Class0(GroupMessageClass.getValue() | Class0FlashMessage.getValue()),

  /// <summary>
  /// Message Class 1 (0xF1)
  /// </summary>
  Class1 (GroupMessageClass.getValue() | Class1MEMessage.getValue()),
  /// <summary>
  /// Message Class 2 (0xF2)
  /// </summary>
  Class2(GroupMessageClass.getValue() | Class2SIMMessage.getValue()),

  /// <summary>
  /// Message Class 3 (0xF3)
  /// </summary>
  Class3(GroupMessageClass.getValue() | Class3TEMessage.getValue()),

  /// <summary>
  /// Class 0 Flash message 8bit data (0xF4)
  /// </summary>
  Class08Bit(GroupMessageClass.getValue() | Class0FlashMessage.getValue() | OctetUnspecified.getValue()),

  /// <summary>
  /// Class 1 ME specific 8-bit data (0xF5)
  /// </summary>
  Class1ME8Bit(GroupMessageClass.getValue() | Class1MEMessage.getValue() | OctetUnspecified.getValue()),

  /// <summary>
  /// Class 2 SIM specific 8-bit data (0xF6)
  /// </summary>
  Class2SIM8Bit(GroupMessageClass.getValue() | Class2SIMMessage.getValue() | OctetUnspecified.getValue()),

  /// <summary>
  /// Class 3 TE specific 8-bit data (0xF7)
  /// </summary>
  Class3TE8Bit( GroupMessageClass.getValue() | Class3TEMessage.getValue() | OctetUnspecified.getValue()),



  /// <summary>
  /// Flash SMS with GSM 7 bit charset (0x10)
  /// </summary>
  DefaultFlashSMS(Class0FlashMessage.getValue()),

  /// <summary>
  /// Flash SMS with Unicode characters (0x18)
  /// </summary>
  UnicodeFlashSMS (UCS2.getValue() | Class0FlashMessage.getValue()),

//          [Obsolete("Use Class2SIM8Bit instead.")]
  Class1SIM8Bit(Class2SIM8Bit.getValue()),

//          [Obsolete("Use Class3TE8Bit instead.")]
  Class1TE8Bit (Class3TE8Bit.getValue()),

  None(0xFE);






  private Integer value;

  DataCodings(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DataCodings fromValue(String text) {
    for (DataCodings b : DataCodings.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<DataCodings> {
    @Override
    public void write(final JsonWriter jsonWriter, final DataCodings enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DataCodings read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return DataCodings.fromValue(String.valueOf(value));
    }
  }
}
