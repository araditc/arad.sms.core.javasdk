/*
 * Arad SMS Core Api V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AradA2PMessage;
import io.swagger.client.model.AradBulkMessage;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient apiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiMessageBulkPost
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageBulkPostCall(AradBulkMessage body, Boolean returnLongId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/message/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (returnLongId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnLongId", returnLongId));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageBulkPostValidateBeforeCall(AradBulkMessage body, Boolean returnLongId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageBulkPostCall(body, returnLongId, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageBulkPost(AradBulkMessage body, Boolean returnLongId, String apiVersion) throws ApiException {
        apiMessageBulkPostWithHttpInfo(body, returnLongId, apiVersion);
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageBulkPostWithHttpInfo(AradBulkMessage body, Boolean returnLongId, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageBulkPostValidateBeforeCall(body, returnLongId, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageBulkPostAsync(AradBulkMessage body, Boolean returnLongId, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageBulkPostValidateBeforeCall(body, returnLongId, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiMessageGetDLRPost
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param returnUDH  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetDLRPostCall(List<String> body, Boolean returnLongId, Boolean returnUDH, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/message/GetDLR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (returnLongId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnLongId", returnLongId));
        if (returnUDH != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnUDH", returnUDH));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageGetDLRPostValidateBeforeCall(List<String> body, Boolean returnLongId, Boolean returnUDH, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageGetDLRPostCall(body, returnLongId, returnUDH, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param returnUDH  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageGetDLRPost(List<String> body, Boolean returnLongId, Boolean returnUDH, String apiVersion) throws ApiException {
        apiMessageGetDLRPostWithHttpInfo(body, returnLongId, returnUDH, apiVersion);
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param returnUDH  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageGetDLRPostWithHttpInfo(List<String> body, Boolean returnLongId, Boolean returnUDH, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageGetDLRPostValidateBeforeCall(body, returnLongId, returnUDH, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param returnUDH  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetDLRPostAsync(List<String> body, Boolean returnLongId, Boolean returnUDH, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageGetDLRPostValidateBeforeCall(body, returnLongId, returnUDH, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiMessageGetMOByDateGet
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetMOByDateGetCall(OffsetDateTime startDateTime, OffsetDateTime endDateTime, Boolean returnId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/message/GetMOByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDateTime", startDateTime));
        if (endDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDateTime", endDateTime));
        if (returnId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnId", returnId));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageGetMOByDateGetValidateBeforeCall(OffsetDateTime startDateTime, OffsetDateTime endDateTime, Boolean returnId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageGetMOByDateGetCall(startDateTime, endDateTime, returnId, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageGetMOByDateGet(OffsetDateTime startDateTime, OffsetDateTime endDateTime, Boolean returnId, String apiVersion) throws ApiException {
        apiMessageGetMOByDateGetWithHttpInfo(startDateTime, endDateTime, returnId, apiVersion);
    }

    /**
     * 
     * 
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageGetMOByDateGetWithHttpInfo(OffsetDateTime startDateTime, OffsetDateTime endDateTime, Boolean returnId, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageGetMOByDateGetValidateBeforeCall(startDateTime, endDateTime, returnId, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param startDateTime  (optional)
     * @param endDateTime  (optional)
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetMOByDateGetAsync(OffsetDateTime startDateTime, OffsetDateTime endDateTime, Boolean returnId, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageGetMOByDateGetValidateBeforeCall(startDateTime, endDateTime, returnId, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiMessageGetMOGet
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetMOGetCall(Boolean returnId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/message/GetMO";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (returnId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnId", returnId));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageGetMOGetValidateBeforeCall(Boolean returnId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageGetMOGetCall(returnId, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageGetMOGet(Boolean returnId, String apiVersion) throws ApiException {
        apiMessageGetMOGetWithHttpInfo(returnId, apiVersion);
    }

    /**
     * 
     * 
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageGetMOGetWithHttpInfo(Boolean returnId, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageGetMOGetValidateBeforeCall(returnId, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param returnId  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageGetMOGetAsync(Boolean returnId, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageGetMOGetValidateBeforeCall(returnId, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiMessageSendGet
     * @param destinationAddress  (optional)
     * @param sourceAddress  (optional)
     * @param messageText  (optional)
     * @param returnLongId  (optional)
     * @param port  (optional)
     * @param referenceNumberType  (optional, default to 8bit)
     * @param validityPeriod  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageSendGetCall(String destinationAddress, String sourceAddress, String messageText, Boolean returnLongId, Integer port, String referenceNumberType, OffsetDateTime validityPeriod, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/message/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destinationAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinationAddress", destinationAddress));
        if (sourceAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceAddress", sourceAddress));
        if (messageText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("messageText", messageText));
        if (returnLongId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnLongId", returnLongId));
        if (port != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("port", port));
        if (referenceNumberType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("referenceNumberType", referenceNumberType));
        if (validityPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validityPeriod", validityPeriod));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageSendGetValidateBeforeCall(String destinationAddress, String sourceAddress, String messageText, Boolean returnLongId, Integer port, String referenceNumberType, OffsetDateTime validityPeriod, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageSendGetCall(destinationAddress, sourceAddress, messageText, returnLongId, port, referenceNumberType, validityPeriod, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param destinationAddress  (optional)
     * @param sourceAddress  (optional)
     * @param messageText  (optional)
     * @param returnLongId  (optional)
     * @param port  (optional)
     * @param referenceNumberType  (optional, default to 8bit)
     * @param validityPeriod  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageSendGet(String destinationAddress, String sourceAddress, String messageText, Boolean returnLongId, Integer port, String referenceNumberType, OffsetDateTime validityPeriod, String apiVersion) throws ApiException {
        apiMessageSendGetWithHttpInfo(destinationAddress, sourceAddress, messageText, returnLongId, port, referenceNumberType, validityPeriod, apiVersion);
    }

    /**
     * 
     * 
     * @param destinationAddress  (optional)
     * @param sourceAddress  (optional)
     * @param messageText  (optional)
     * @param returnLongId  (optional)
     * @param port  (optional)
     * @param referenceNumberType  (optional, default to 8bit)
     * @param validityPeriod  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageSendGetWithHttpInfo(String destinationAddress, String sourceAddress, String messageText, Boolean returnLongId, Integer port, String referenceNumberType, OffsetDateTime validityPeriod, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageSendGetValidateBeforeCall(destinationAddress, sourceAddress, messageText, returnLongId, port, referenceNumberType, validityPeriod, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param destinationAddress  (optional)
     * @param sourceAddress  (optional)
     * @param messageText  (optional)
     * @param returnLongId  (optional)
     * @param port  (optional)
     * @param referenceNumberType  (optional, default to 8bit)
     * @param validityPeriod  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageSendGetAsync(String destinationAddress, String sourceAddress, String messageText, Boolean returnLongId, Integer port, String referenceNumberType, OffsetDateTime validityPeriod, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageSendGetValidateBeforeCall(destinationAddress, sourceAddress, messageText, returnLongId, port, referenceNumberType, validityPeriod, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiMessageSendPost
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiMessageSendPostCall(List<AradA2PMessage> body, Boolean returnLongId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/message/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (returnLongId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnLongId", returnLongId));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiMessageSendPostValidateBeforeCall(List<AradA2PMessage> body, Boolean returnLongId, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiMessageSendPostCall(body, returnLongId, apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiMessageSendPost(List<AradA2PMessage> body, Boolean returnLongId, String apiVersion) throws ApiException {
        apiMessageSendPostWithHttpInfo(body, returnLongId, apiVersion);
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiMessageSendPostWithHttpInfo(List<AradA2PMessage> body, Boolean returnLongId, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = apiMessageSendPostValidateBeforeCall(body, returnLongId, apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param returnLongId  (optional)
     * @param apiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiMessageSendPostAsync(List<AradA2PMessage> body, Boolean returnLongId, String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiMessageSendPostValidateBeforeCall(body, returnLongId, apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
